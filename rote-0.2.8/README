ROTE - OUR OWN TERMINAL EMULATION LIBRARY
Copyright (c) 2004 Bruno T. C. de Oliveira
Licensed under the GNU Lesser General Public License
See the COPYING file for more details on the license terms.

[[ AUTHOR AND PROJECT HOMEPAGE ]]
This library was written by Bruno Takahashi C. de Oliveira, a
Computer Science student at Universidade de São Paulo, Brazil.
The project home page is:

                http://rote.sourceforge.net

[[ OTHER PEOPLE INVOLVED IN DEVELOPING THIS LIBRARY ]]

* Phil Endecott (phil_achbq_endecott@chezphil.org)

[[ WHAT IS IT? ]]

ROTE is a simple C library for VT102 terminal emulation. It allows the
programmer to set up virtual 'screens' and send them data. The virtual
screens will emulate the behavior of a VT102 terminal, interpreting
escape sequences, control characters and such. The library supports
ncurses as well so that you may render the virtual screen to the real
screen when you need to.

[[ MORE DETAILS ]]

There are several programs that do terminal emulation, such as xterm, rxvt,
screen and even the Linux console driver itself. However, it is not easy to
isolate their terminal emulation logic and put it in a module that can be
easily reused in other programs. That's where the ROTE library comes in.

The goal of the ROTE library is to provide terminal emulation support
for C/C++ applications, making it possible to write programs that display
terminals in embedded windows within them, or even monitor the display
produced by other programs.

The ROTE library does not depend on any other library (except libc, of course),
and ncurses support can be enabled or disabled at compile-time. With ncurses
support compiled in, the ROTE library is able to render the virtual screens
to the physical screen (actually any ncurses window) and can also translate
ncurses key codes to the escape sequences the Linux console would have
produced (and feed them into the terminal). Ncurses support is not mandatory
however, and ROTE will work fine without it, but in that case the application
must take care of drawing the terminal to the screen in whichever way it
sees fit.

ROTE also encapsulates the functionality needed to execute a child process
using the virtual screen as the controlling terminal. It will handle the
creation of the pseudo-terminal and the child process. All the application
has to do is tell it the command to run in the terminal and call an update
function at regular intervals to allow the terminal to update itself.


